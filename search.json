[
  {
    "objectID": "Spotify/Spotify.html",
    "href": "Spotify/Spotify.html",
    "title": "Spotify Favorites",
    "section": "",
    "text": "In my Spotify wrapped from 2024 my top artists were Mt. Joy, Mac Miller and Tyler the Creator\nThese are all of Tyler, The Creator, Mac Miller and Mt. Joy’s songs on spotify\n\nimport pandas as pd\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify.set_index('artist_name', inplace=True)\nTyler = spotify.loc['Tyler, The Creator',['track_name','album_name']]\nTyler\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nTyler, The Creator\nAU79\nGoblin\n\n\nTyler, The Creator\nDEATHCAMP\nCherry Bomb\n\n\nTyler, The Creator\nGoblin\nGoblin\n\n\nTyler, The Creator\nYonkers\nGoblin\n\n\nTyler, The Creator\nWhere This Flower Blooms\nFlower Boy\n\n\n...\n...\n...\n\n\nTyler, The Creator\nAnswer\nWolf\n\n\nTyler, The Creator\nJamba\nWolf\n\n\nTyler, The Creator\nFUCKING YOUNG / PERFECT\nCherry Bomb\n\n\nTyler, The Creator\nFUCKING YOUNG / PERFECT\nCherry Bomb\n\n\nTyler, The Creator\nYonkers\nGoblin\n\n\n\n\n173 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nMac = spotify.loc['Mac Miller',['track_name','album_name']]\nMac\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nMac Miller\nDonald Trump\nBlue Slide Park\n\n\nMac Miller\nWeekend (feat. Miguel)\nGO:OD AM\n\n\nMac Miller\nDang! (feat. Anderson .Paak)\nThe Divine Feminine\n\n\nMac Miller\nCinderella (feat. Ty Dolla $ign)\nThe Divine Feminine\n\n\nMac Miller\nKnock Knock\nKnock Knock - Single\n\n\n...\n...\n...\n\n\nMac Miller\nBlue Slide Park\nBlue Slide Park\n\n\nMac Miller\nParty On Fifth Ave.\nBlue Slide Park\n\n\nMac Miller\nWeekend (feat. Miguel)\nGO:OD AM\n\n\nMac Miller\nMy Favorite Part\nThe Divine Feminine\n\n\nMac Miller\nDang! (feat. Anderson .Paak)\nThe Divine Feminine\n\n\n\n\n181 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nMt = spotify.loc['Mt. Joy',['track_name','album_name']]\nMt\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nMt. Joy\nSheep\nSheep\n\n\nMt. Joy\nAstrovan\nAstrovan\n\n\nMt. Joy\nSheep\nSheep\n\n\nMt. Joy\nSheep\nSheep\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nThere are 18866 different artists on spotify.\n\nspotify.index.nunique()\n\n18866\n\n\nWe can now see that the longest audio on spotify is 20744575 ms and other than the songs with 0 seconds we see that the shortest is 182 ms\n\nspotify.sort_values(by = 'duration_ms', ascending=False)\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\ntrack_name\nduration_ms\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\n\n\n\n\nDBS Audiobooks\n999977\nAudiobooks\n6\nThe Hound of the Baskervilles - Sir Arthur Con...\n20744575\nThe Hound of the Baskervilles - Sir Arthur Con...\n\n\nDBS Audiobooks\n999977\nAudiobooks\n0\nThe Adventures of Sherlock Holmes - Sir Arthur...\n20159059\nThe Adventures of Sherlock Holmes - Sir Arthur...\n\n\nDBS Audiobooks\n999977\nAudiobooks\n2\nThe Invisible Man - H G Wells\n17232897\nThe Invisible Man - H G Wells\n\n\nDBS Audiobooks\n999977\nAudiobooks\n3\nThe Phantom of the Opera - Gaston Leroux Part ...\n16362057\nThe Phantom of the Opera - Gaston Leroux\n\n\nDBS Audiobooks\n999977\nAudiobooks\n1\nWhite Fang - Jack London Part 1 of 2\n15267056\nWhite Fang - Jack London\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\nBass Modulators\n877\nELECTRONICAS\n29\nOxygen - Radio Edit\n186\nOxygen\n\n\nMarty Grimes\n843\n2016\n178\nThe Famm\n0\nThe Famm\n\n\nMarty Grimes\n1423\nHood\n176\nThe Famm\n0\nThe Famm\n\n\nTigers in the Sky\n943\nFall 2015\n30\nParis\n0\nGolden Lights\n\n\nMarty Grimes\n693\nchill time\n67\nThe Famm\n0\nThe Famm\n\n\n\n\n198005 rows × 6 columns"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Spotify/Spotify.html",
    "href": "posts/Spotify/Spotify.html",
    "title": "Spotify Favorites",
    "section": "",
    "text": "In my Spotify wrapped from 2024 my top artists were Mt. Joy, Mac Miller and Tyler the Creator\nThese are all of Tyler, The Creator, Mac Miller and Mt. Joy’s songs on spotify\n\nimport pandas as pd\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify.set_index('artist_name', inplace=True)\nTyler = spotify.loc['Tyler, The Creator',['track_name','album_name']]\nTyler\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nTyler, The Creator\nAU79\nGoblin\n\n\nTyler, The Creator\nDEATHCAMP\nCherry Bomb\n\n\nTyler, The Creator\nGoblin\nGoblin\n\n\nTyler, The Creator\nYonkers\nGoblin\n\n\nTyler, The Creator\nWhere This Flower Blooms\nFlower Boy\n\n\n...\n...\n...\n\n\nTyler, The Creator\nAnswer\nWolf\n\n\nTyler, The Creator\nJamba\nWolf\n\n\nTyler, The Creator\nFUCKING YOUNG / PERFECT\nCherry Bomb\n\n\nTyler, The Creator\nFUCKING YOUNG / PERFECT\nCherry Bomb\n\n\nTyler, The Creator\nYonkers\nGoblin\n\n\n\n\n173 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nMac = spotify.loc['Mac Miller',['track_name','album_name']]\nMac\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nMac Miller\nDonald Trump\nBlue Slide Park\n\n\nMac Miller\nWeekend (feat. Miguel)\nGO:OD AM\n\n\nMac Miller\nDang! (feat. Anderson .Paak)\nThe Divine Feminine\n\n\nMac Miller\nCinderella (feat. Ty Dolla $ign)\nThe Divine Feminine\n\n\nMac Miller\nKnock Knock\nKnock Knock - Single\n\n\n...\n...\n...\n\n\nMac Miller\nBlue Slide Park\nBlue Slide Park\n\n\nMac Miller\nParty On Fifth Ave.\nBlue Slide Park\n\n\nMac Miller\nWeekend (feat. Miguel)\nGO:OD AM\n\n\nMac Miller\nMy Favorite Part\nThe Divine Feminine\n\n\nMac Miller\nDang! (feat. Anderson .Paak)\nThe Divine Feminine\n\n\n\n\n181 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nMt = spotify.loc['Mt. Joy',['track_name','album_name']]\nMt\n\n\n  \n    \n\n\n\n\n\n\ntrack_name\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\nMt. Joy\nSheep\nSheep\n\n\nMt. Joy\nAstrovan\nAstrovan\n\n\nMt. Joy\nSheep\nSheep\n\n\nMt. Joy\nSheep\nSheep\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nThere are 18866 different artists on spotify.\n\nspotify.index.nunique()\n\n18866\n\n\nWe can now see that the longest audio on spotify is 20744575 ms and other than the songs with 0 seconds we see that the shortest is 182 ms\n\nspotify.sort_values(by = 'duration_ms', ascending=False)\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\ntrack_name\nduration_ms\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\n\n\n\n\nDBS Audiobooks\n999977\nAudiobooks\n6\nThe Hound of the Baskervilles - Sir Arthur Con...\n20744575\nThe Hound of the Baskervilles - Sir Arthur Con...\n\n\nDBS Audiobooks\n999977\nAudiobooks\n0\nThe Adventures of Sherlock Holmes - Sir Arthur...\n20159059\nThe Adventures of Sherlock Holmes - Sir Arthur...\n\n\nDBS Audiobooks\n999977\nAudiobooks\n2\nThe Invisible Man - H G Wells\n17232897\nThe Invisible Man - H G Wells\n\n\nDBS Audiobooks\n999977\nAudiobooks\n3\nThe Phantom of the Opera - Gaston Leroux Part ...\n16362057\nThe Phantom of the Opera - Gaston Leroux\n\n\nDBS Audiobooks\n999977\nAudiobooks\n1\nWhite Fang - Jack London Part 1 of 2\n15267056\nWhite Fang - Jack London\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\nBass Modulators\n877\nELECTRONICAS\n29\nOxygen - Radio Edit\n186\nOxygen\n\n\nMarty Grimes\n843\n2016\n178\nThe Famm\n0\nThe Famm\n\n\nMarty Grimes\n1423\nHood\n176\nThe Famm\n0\nThe Famm\n\n\nTigers in the Sky\n943\nFall 2015\n30\nParis\n0\nGolden Lights\n\n\nMarty Grimes\n693\nchill time\n67\nThe Famm\n0\nThe Famm\n\n\n\n\n198005 rows × 6 columns"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html",
    "href": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html",
    "title": "Final Project Blog",
    "section": "",
    "text": "# Below is to import the pandas library as pd\nimport pandas as pd\n\n# Below is for an interactive display of DataFrame in Colab\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()"
  },
  {
    "objectID": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#unifying-environmental-social-and-governance-esg-metrics-with-financial-analysis",
    "href": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#unifying-environmental-social-and-governance-esg-metrics-with-financial-analysis",
    "title": "Final Project Blog",
    "section": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "text": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis\n\nIntroduction:\nBackground:\nEnvironmental, Social and Governance metrics are vital for looking at corpoations sustaintability and ethical impact. These ESG metrics can be very useful for investiors and stakeholders to look at the long term risk and value of companies. Often times companies with better ESG metrics are ranked higher and have more potential for long term growth since they are more conciously aware of environmental and social issues.\nStatement of the Problem:\nIn this project we will evaluate these ESG metrics pertaining to total ESG risk score, Environmental Risk Score, Social Risk score, Governance Risk Score and Controvery Level. These specific metrics are not commonly analyzed when looking at how a company is performing in the stock market. Thus this projecct aims to make a connections between the relationship of ESG metrics and stock market outcomes to see any trends or correlations between a company’s total value and their risk profile.\n\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\nstock_history_2023\n\nWarning: total number of rows (157750) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nYear\nSymbol\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\n\n\n\n\n0\n2023-12-29\n2023\nA\n138.587233\n139.215036\n137.879691\n138.547363\n1014400\n0.236\n0.0\n\n\n1\n2023-12-28\n2023\nA\n139.815657\n140.084270\n138.930245\n139.049637\n892600\n0.000\n0.0\n\n\n2\n2023-12-27\n2023\nA\n139.059578\n139.437624\n138.363189\n139.099380\n1182300\n0.000\n0.0\n\n\n3\n2023-12-26\n2023\nA\n138.591994\n139.746018\n138.373126\n139.089416\n948400\n0.000\n0.0\n\n\n4\n2023-12-22\n2023\nA\n138.890449\n139.636584\n138.074668\n138.850662\n1204100\n0.000\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n157745\n2023-01-09\n2023\nZTS\n146.205080\n146.715330\n144.242596\n144.301468\n1700500\n0.000\n0.0\n\n\n157746\n2023-01-06\n2023\nZTS\n143.840283\n145.832203\n138.865393\n144.870590\n1761200\n0.000\n0.0\n\n\n157747\n2023-01-05\n2023\nZTS\n144.586064\n145.400482\n141.563836\n142.721695\n1560900\n0.000\n0.0\n\n\n157748\n2023-01-04\n2023\nZTS\n146.224720\n147.981137\n145.184606\n146.165848\n1796100\n0.000\n0.0\n\n\n157749\n2023-01-03\n2023\nZTS\n145.871459\n145.999010\n142.486177\n144.095413\n1840600\n0.000\n0.0\n\n\n\n\n157750 rows × 10 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nfrom google.colab import drive, files\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n\n\n\nESG_data = pd.read_csv(\"/content/ESG_data.csv\")\nESG_data\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\n&lt;ipython-input-10-bebae368a3f0&gt; in &lt;cell line: 0&gt;()\n----&gt; 1 ESG_data = pd.read_csv(\"/content/ESG_data.csv\")\n      2 ESG_data\n\n/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1024     kwds.update(kwds_defaults)\n   1025 \n-&gt; 1026     return _read(filepath_or_buffer, kwds)\n   1027 \n   1028 \n\n/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py in _read(filepath_or_buffer, kwds)\n    618 \n    619     # Create the parser.\n--&gt; 620     parser = TextFileReader(filepath_or_buffer, **kwds)\n    621 \n    622     if chunksize or iterator:\n\n/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py in __init__(self, f, engine, **kwds)\n   1618 \n   1619         self.handles: IOHandles | None = None\n-&gt; 1620         self._engine = self._make_engine(f, self.engine)\n   1621 \n   1622     def close(self) -&gt; None:\n\n/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py in _make_engine(self, f, engine)\n   1878                 if \"b\" not in mode:\n   1879                     mode += \"b\"\n-&gt; 1880             self.handles = get_handle(\n   1881                 f,\n   1882                 mode,\n\n/usr/local/lib/python3.11/dist-packages/pandas/io/common.py in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    871         if ioargs.encoding and \"b\" not in ioargs.mode:\n    872             # Encoding\n--&gt; 873             handle = open(\n    874                 handle,\n    875                 ioargs.mode,\n\nFileNotFoundError: [Errno 2] No such file or directory: '/content/ESG_data.csv'\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ngrowth = []\nfor i in range(1, len(stock_history_2023)):\n    value = (stock_history_2023.loc[i, 'Close'] - stock_history_2023.loc[i-1, 'Close']) / stock_history_2023.loc[i-1, 'Close']\n    growth.append(value)\n\n# Insert into DataFrame\nstock_history_2023['Growth'] = [None] + growth  # First row has no previous value\n\nprint(stock_history_2023)\n\n              Date  Year Symbol        Open        High         Low  \\\n0       2023-12-29  2023      A  138.587233  139.215036  137.879691   \n1       2023-12-28  2023      A  139.815657  140.084270  138.930245   \n2       2023-12-27  2023      A  139.059578  139.437624  138.363189   \n3       2023-12-26  2023      A  138.591994  139.746018  138.373126   \n4       2023-12-22  2023      A  138.890449  139.636584  138.074668   \n...            ...   ...    ...         ...         ...         ...   \n157745  2023-01-09  2023    ZTS  146.205080  146.715330  144.242596   \n157746  2023-01-06  2023    ZTS  143.840283  145.832203  138.865393   \n157747  2023-01-05  2023    ZTS  144.586064  145.400482  141.563836   \n157748  2023-01-04  2023    ZTS  146.224720  147.981137  145.184606   \n157749  2023-01-03  2023    ZTS  145.871459  145.999010  142.486177   \n\n             Close   Volume  Dividend  Stock_Splits    Growth  \n0       138.547363  1014400     0.236           0.0       NaN  \n1       139.049637   892600     0.000           0.0  0.003625  \n2       139.099380  1182300     0.000           0.0  0.000358  \n3       139.089416   948400     0.000           0.0 -0.000072  \n4       138.850662  1204100     0.000           0.0 -0.001717  \n...            ...      ...       ...           ...       ...  \n157745  144.301468  1700500     0.000           0.0 -0.047292  \n157746  144.870590  1761200     0.000           0.0  0.003944  \n157747  142.721695  1560900     0.000           0.0 -0.014833  \n157748  146.165848  1796100     0.000           0.0  0.024132  \n157749  144.095413  1840600     0.000           0.0 -0.014165  \n\n[157750 rows x 11 columns]\n\n\n\n# Remove outliers using IQR method\nQ1 = stock_history_2023['Growth'].quantile(0.01)\nQ3 = stock_history_2023['Growth'].quantile(0.99)\nIQR = Q3 - Q1\n\n# Filter the data\nfiltered_data = stock_history_2023[(stock_history_2023['Growth'] &gt;= Q1 - 1.5 * IQR) &\n                                   (stock_history_2023['Growth'] &lt;= Q3 + 1.5 * IQR)]\n\n\nmerge_data = pd.merge(filtered_data, ESG_data, on='Symbol')\nmerge_data\n\nWarning: total number of rows (155677) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nYear\nSymbol\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\nGrowth\nTotal_ESG_Risk_Rating\nEnvironmental_Risk_Rating\nSocial_Risk_Rating\nGovernance_Risk_Rating\nControversy_Level\n\n\n\n\n0\n2023-12-28\n2023\nA\n139.815657\n140.084270\n138.930245\n139.049637\n892600\n0.0\n0.0\n0.003625\n10.1\n1.1\n5.0\n3.9\n1.0\n\n\n1\n2023-12-27\n2023\nA\n139.059578\n139.437624\n138.363189\n139.099380\n1182300\n0.0\n0.0\n0.000358\n10.1\n1.1\n5.0\n3.9\n1.0\n\n\n2\n2023-12-26\n2023\nA\n138.591994\n139.746018\n138.373126\n139.089416\n948400\n0.0\n0.0\n-0.000072\n10.1\n1.1\n5.0\n3.9\n1.0\n\n\n3\n2023-12-22\n2023\nA\n138.890449\n139.636584\n138.074668\n138.850662\n1204100\n0.0\n0.0\n-0.001717\n10.1\n1.1\n5.0\n3.9\n1.0\n\n\n4\n2023-12-21\n2023\nA\n138.661642\n138.950141\n137.288750\n138.223907\n1685700\n0.0\n0.0\n-0.004514\n10.1\n1.1\n5.0\n3.9\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n155672\n2023-01-09\n2023\nZTS\n146.205080\n146.715330\n144.242596\n144.301468\n1700500\n0.0\n0.0\n-0.047292\n15.1\n2.7\n5.8\n6.6\n2.0\n\n\n155673\n2023-01-06\n2023\nZTS\n143.840283\n145.832203\n138.865393\n144.870590\n1761200\n0.0\n0.0\n0.003944\n15.1\n2.7\n5.8\n6.6\n2.0\n\n\n155674\n2023-01-05\n2023\nZTS\n144.586064\n145.400482\n141.563836\n142.721695\n1560900\n0.0\n0.0\n-0.014833\n15.1\n2.7\n5.8\n6.6\n2.0\n\n\n155675\n2023-01-04\n2023\nZTS\n146.224720\n147.981137\n145.184606\n146.165848\n1796100\n0.0\n0.0\n0.024132\n15.1\n2.7\n5.8\n6.6\n2.0\n\n\n155676\n2023-01-03\n2023\nZTS\n145.871459\n145.999010\n142.486177\n144.095413\n1840600\n0.0\n0.0\n-0.014165\n15.1\n2.7\n5.8\n6.6\n2.0\n\n\n\n\n155677 rows × 16 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\nExploratory Data Analysis:"
  },
  {
    "objectID": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#significiance-of-the-project",
    "href": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#significiance-of-the-project",
    "title": "Final Project Blog",
    "section": "Significiance of the Project:",
    "text": "Significiance of the Project:\nOverall this project examines Environmental, Social and Governance Factors and how they affect a company and their business.\n\nSpecifically our porject explored whether the more ESG responsability companies performed well financailly through their 2023 stocks compared to the companies with less ESG responsability.\nThis project is significant because these social, evironmental and goverance issues are real problems but many times they are overlooked by companies. Looking at this data can help support build a more sustainable and socially positive portfolio for businesses.\nAdditionally this information can help to keep companies accountable for their actions as more people became aware of these ratings.\nAs a consumer I think it would be useful to know how companies rate on the different ESG categories as it might defer consumers if their ratings are poor in certain areas. For instance before this project I had never heard of the term ESG so I found this project intersting and am now more curious to see how the companies/corportaion I buy from fall into these ratings becuase I would not want to support companies with very low environmental, social or governance ratings."
  },
  {
    "objectID": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#refrences",
    "href": "posts/danl_210_OLEY_LUNA_stocks_ESG_files/danl_210_OLEY_LUNA_stocks_ESG.html#refrences",
    "title": "Final Project Blog",
    "section": "Refrences",
    "text": "Refrences\n\nProfessor Choe\nChatGPT: For help in generating graphs of ESG category and Growth and analyzing some of them."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Luna Oley",
    "section": "",
    "text": "Luna Oley majors in Mathematics with a double minor in Data Analytics and Business Studies. When she isn’t studying for her degree she is organizing events for the club lacrosse team, going to practice, Working as a calculus I supplemental instuctor or serving at The Village Tavern."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Luna Oley",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.A. in Mathematics | Aug 2022 - May 2026  Minor in Business Studies and a minor in Data Analytics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Luna Oley",
    "section": "Experience",
    "text": "Experience"
  },
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nFinal Project Blog\n\n\n\n\n\n\n\n\nMay 13, 2025\n\n\nCarolyn_Mack and Luna Oley\n\n\n9 min\n\n\n\n\n\n\n\n\n\n\n\n\nChristmas Movies\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\nLuna Oley\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify Favorites\n\n\n\n\n\n\n\n\nMar 5, 2025\n\n\nLuna Oley\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nFeb 17, 2025\n\n\nLuna Oley\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Holiday_Movies.html",
    "href": "Holiday_Movies.html",
    "title": "Christmas Movies",
    "section": "",
    "text": "First we load the Holiday Movies and Holiday Movies Genres dataset and observe it’s structure. The Holiday Movies data set contains variables named tconst, title_type, primary_title, simple_title, and year. The Holiday Movie Genres dataset has 3 variables, runtime_minutes, average_rating, and num_votes.\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\nprint(holiday_movies.head())\n\n      tconst title_type          primary_title          simple_title  year  \\\n0  tt0020356      movie       Sailor's Holiday       sailors holiday  1929   \n1  tt0020823      movie    The Devil's Holiday    the devils holiday  1930   \n2  tt0020985      movie                Holiday               holiday  1930   \n3  tt0021268      movie  Holiday of St. Jorgen  holiday of st jorgen  1930   \n4  tt0021377      movie    Sin Takes a Holiday   sin takes a holiday  1930   \n\n   runtime_minutes  average_rating  num_votes  \n0             58.0             5.4         55  \n1             80.0             6.0        242  \n2             91.0             6.3        638  \n3             83.0             7.4        256  \n4             81.0             6.1        740  \n\n\n\n\nWe will start looking at the data by counting the number of movies by year from the Holiday Movies data set.\n\n# Count the number of movies by year\nmovies_by_year = holiday_movies['year'].value_counts().sort_index()\n\nprint(movies_by_year)\n\nyear\n1929      1\n1930      5\n1931      1\n1934      3\n1936      2\n       ... \n2019    143\n2020    172\n2021    183\n2022    173\n2023    107\nName: count, Length: 91, dtype: int64\n\n\nThen we look at the Holiday Movies dataset number of imb rating in descending order. We do this by sorting the values by the variables “num_votes”.\n\n# Sort movies by IMDb rating in descending order\ntop_rated_movies = holiday_movies.sort_values(by='num_votes', ascending=False).head(10)\n\nprint(top_rated_movies[['primary_title', 'num_votes']])\n\n                              primary_title  num_votes\n151          The Nightmare Before Christmas     367288\n501                             The Holiday     308807\n211          How the Grinch Stole Christmas     276568\n135   National Lampoon's Christmas Vacation     209533\n107                       A Christmas Story     163273\n48                            Roman Holiday     145289\n499                      Mr. Bean's Holiday     132186\n680                       A Christmas Carol     125562\n2151                         Last Christmas      86058\n1288                 Office Christmas Party      85255\n\n\nNext we will look to filter movies released in or after 200.\n\n# Filter movies released in or after 2000\nmodern_holiday_movies = holiday_movies[holiday_movies['year'] &gt;= 2000]\n\nprint(modern_holiday_movies.head())\n\n        tconst title_type                   primary_title  \\\n211  tt0170016      movie  How the Grinch Stole Christmas   \n250  tt0217978      movie                         'R Xmas   \n256  tt0221074      movie         Christmas in the Clouds   \n269  tt0233828      movie                The Long Holiday   \n273  tt0238121      movie  A Christmas Tree and a Wedding   \n\n                       simple_title  year  runtime_minutes  average_rating  \\\n211  how the grinch stole christmas  2000            104.0             6.3   \n250                          r xmas  2001             85.0             5.7   \n256         christmas in the clouds  2001             96.0             6.4   \n269                the long holiday  2000            145.0             7.9   \n273  a christmas tree and a wedding  2000             90.0             8.3   \n\n     num_votes  \n211     276568  \n250       1588  \n256        863  \n269        116  \n273         57  \n\n\nNow using the Holiday Movie and Holiday Movie Genres data sets we will merge them to first combine them to create a dataset that includes all the variables. Then with this dataset we will find the highest rated movue for each genre\n\n# Find the highest-rated movie for each genre\n# Perform an inner join to combine movie and genre information\nmovies_with_genres = pd.merge(holiday_movies, holiday_movie_genres, how='inner', on='tconst')\n\nprint(movies_with_genres.head())\n\nhighest_rated_by_genre = movies_with_genres.loc[movies_with_genres.groupby('genres')['num_votes'].idxmax()]\n\nprint(highest_rated_by_genre[['genres', 'primary_title', 'num_votes']])\n\n      tconst title_type        primary_title        simple_title  year  \\\n0  tt0020356      movie     Sailor's Holiday     sailors holiday  1929   \n1  tt0020823      movie  The Devil's Holiday  the devils holiday  1930   \n2  tt0020823      movie  The Devil's Holiday  the devils holiday  1930   \n3  tt0020985      movie              Holiday             holiday  1930   \n4  tt0020985      movie              Holiday             holiday  1930   \n\n   runtime_minutes  average_rating  num_votes   genres  \n0             58.0             5.4         55   Comedy  \n1             80.0             6.0        242    Drama  \n2             80.0             6.0        242  Romance  \n3             91.0             6.3        638   Comedy  \n4             91.0             6.3        638    Drama  \n           genres                                      primary_title  \\\n3217       Action                                            Holiday   \n1391    Adventure                                  A Christmas Carol   \n316     Animation                     The Nightmare Before Christmas   \n3883    Biography                     The Man Who Invented Christmas   \n1023       Comedy                                        The Holiday   \n3218        Crime                                            Holiday   \n1798  Documentary            Louis Theroux's African Hunting Holiday   \n4290        Drama                                     Last Christmas   \n317        Family                     The Nightmare Before Christmas   \n318       Fantasy                     The Nightmare Before Christmas   \n60      Film-Noir                                  Christmas Holiday   \n263       History                       Blackadder's Christmas Carol   \n171        Horror                                    Black Christmas   \n54          Music                                        Holiday Inn   \n112       Musical                                    White Christmas   \n172       Mystery                                    Black Christmas   \n3776         News   Disney Parks Unforgettable Christmas Celebration   \n4486   Reality-TV            D'Astrain No Cinema - Christmas Special   \n1024      Romance                                        The Holiday   \n839        Sci-Fi                                  Christmas on Mars   \n3903        Short                         Four Christmases: Gag Reel   \n3797        Sport                              Falling for Christmas   \n3773    Talk-Show  A Christmas Eve Conversation with Quentin Tara...   \n173      Thriller                                    Black Christmas   \n231           War                       Merry Christmas Mr. Lawrence   \n3452      Western                                El Camino Christmas   \n\n      num_votes  \n3217      29676  \n1391     125562  \n316      367288  \n3883      17908  \n1023     308807  \n3218      29676  \n1798       1138  \n4290      86058  \n317      367288  \n318      367288  \n60         1583  \n263       13712  \n171       46105  \n54        16722  \n112       47688  \n172       46105  \n3776         18  \n4486         81  \n1024     308807  \n839         814  \n3903        744  \n3797       1644  \n3773         36  \n173       46105  \n231       19475  \n3452      10269"
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "posts/Holiday Movies/Holiday_Movies.html",
    "href": "posts/Holiday Movies/Holiday_Movies.html",
    "title": "Christmas Movies",
    "section": "",
    "text": "First we load the Holiday Movies and Holiday Movies Genres dataset and observe it’s structure. The Holiday Movies data set contains variables named tconst, title_type, primary_title, simple_title, and year. The Holiday Movie Genres dataset has 3 variables, runtime_minutes, average_rating, and num_votes.\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\nprint(holiday_movies.head())\n\n      tconst title_type          primary_title          simple_title  year  \\\n0  tt0020356      movie       Sailor's Holiday       sailors holiday  1929   \n1  tt0020823      movie    The Devil's Holiday    the devils holiday  1930   \n2  tt0020985      movie                Holiday               holiday  1930   \n3  tt0021268      movie  Holiday of St. Jorgen  holiday of st jorgen  1930   \n4  tt0021377      movie    Sin Takes a Holiday   sin takes a holiday  1930   \n\n   runtime_minutes  average_rating  num_votes  \n0             58.0             5.4         55  \n1             80.0             6.0        242  \n2             91.0             6.3        638  \n3             83.0             7.4        256  \n4             81.0             6.1        740  \n\n\n\n\nWe will start looking at the data by counting the number of movies by year from the Holiday Movies data set.\n\n# Count the number of movies by year\nmovies_by_year = holiday_movies['year'].value_counts().sort_index()\n\nprint(movies_by_year)\n\nyear\n1929      1\n1930      5\n1931      1\n1934      3\n1936      2\n       ... \n2019    143\n2020    172\n2021    183\n2022    173\n2023    107\nName: count, Length: 91, dtype: int64\n\n\nThen we look at the Holiday Movies dataset number of imb rating in descending order. We do this by sorting the values by the variables “num_votes”.\n\n# Sort movies by IMDb rating in descending order\ntop_rated_movies = holiday_movies.sort_values(by='num_votes', ascending=False).head(10)\n\nprint(top_rated_movies[['primary_title', 'num_votes']])\n\n                              primary_title  num_votes\n151          The Nightmare Before Christmas     367288\n501                             The Holiday     308807\n211          How the Grinch Stole Christmas     276568\n135   National Lampoon's Christmas Vacation     209533\n107                       A Christmas Story     163273\n48                            Roman Holiday     145289\n499                      Mr. Bean's Holiday     132186\n680                       A Christmas Carol     125562\n2151                         Last Christmas      86058\n1288                 Office Christmas Party      85255\n\n\nNext we will look to filter movies released in or after 200.\n\n# Filter movies released in or after 2000\nmodern_holiday_movies = holiday_movies[holiday_movies['year'] &gt;= 2000]\n\nprint(modern_holiday_movies.head())\n\n        tconst title_type                   primary_title  \\\n211  tt0170016      movie  How the Grinch Stole Christmas   \n250  tt0217978      movie                         'R Xmas   \n256  tt0221074      movie         Christmas in the Clouds   \n269  tt0233828      movie                The Long Holiday   \n273  tt0238121      movie  A Christmas Tree and a Wedding   \n\n                       simple_title  year  runtime_minutes  average_rating  \\\n211  how the grinch stole christmas  2000            104.0             6.3   \n250                          r xmas  2001             85.0             5.7   \n256         christmas in the clouds  2001             96.0             6.4   \n269                the long holiday  2000            145.0             7.9   \n273  a christmas tree and a wedding  2000             90.0             8.3   \n\n     num_votes  \n211     276568  \n250       1588  \n256        863  \n269        116  \n273         57  \n\n\nNow using the Holiday Movie and Holiday Movie Genres data sets we will merge them to first combine them to create a dataset that includes all the variables. Then with this dataset we will find the highest rated movue for each genre\n\n# Find the highest-rated movie for each genre\n# Perform an inner join to combine movie and genre information\nmovies_with_genres = pd.merge(holiday_movies, holiday_movie_genres, how='inner', on='tconst')\n\nprint(movies_with_genres.head())\n\nhighest_rated_by_genre = movies_with_genres.loc[movies_with_genres.groupby('genres')['num_votes'].idxmax()]\n\nprint(highest_rated_by_genre[['genres', 'primary_title', 'num_votes']])\n\n      tconst title_type        primary_title        simple_title  year  \\\n0  tt0020356      movie     Sailor's Holiday     sailors holiday  1929   \n1  tt0020823      movie  The Devil's Holiday  the devils holiday  1930   \n2  tt0020823      movie  The Devil's Holiday  the devils holiday  1930   \n3  tt0020985      movie              Holiday             holiday  1930   \n4  tt0020985      movie              Holiday             holiday  1930   \n\n   runtime_minutes  average_rating  num_votes   genres  \n0             58.0             5.4         55   Comedy  \n1             80.0             6.0        242    Drama  \n2             80.0             6.0        242  Romance  \n3             91.0             6.3        638   Comedy  \n4             91.0             6.3        638    Drama  \n           genres                                      primary_title  \\\n3217       Action                                            Holiday   \n1391    Adventure                                  A Christmas Carol   \n316     Animation                     The Nightmare Before Christmas   \n3883    Biography                     The Man Who Invented Christmas   \n1023       Comedy                                        The Holiday   \n3218        Crime                                            Holiday   \n1798  Documentary            Louis Theroux's African Hunting Holiday   \n4290        Drama                                     Last Christmas   \n317        Family                     The Nightmare Before Christmas   \n318       Fantasy                     The Nightmare Before Christmas   \n60      Film-Noir                                  Christmas Holiday   \n263       History                       Blackadder's Christmas Carol   \n171        Horror                                    Black Christmas   \n54          Music                                        Holiday Inn   \n112       Musical                                    White Christmas   \n172       Mystery                                    Black Christmas   \n3776         News   Disney Parks Unforgettable Christmas Celebration   \n4486   Reality-TV            D'Astrain No Cinema - Christmas Special   \n1024      Romance                                        The Holiday   \n839        Sci-Fi                                  Christmas on Mars   \n3903        Short                         Four Christmases: Gag Reel   \n3797        Sport                              Falling for Christmas   \n3773    Talk-Show  A Christmas Eve Conversation with Quentin Tara...   \n173      Thriller                                    Black Christmas   \n231           War                       Merry Christmas Mr. Lawrence   \n3452      Western                                El Camino Christmas   \n\n      num_votes  \n3217      29676  \n1391     125562  \n316      367288  \n3883      17908  \n1023     308807  \n3218      29676  \n1798       1138  \n4290      86058  \n317      367288  \n318      367288  \n60         1583  \n263       13712  \n171       46105  \n54        16722  \n112       47688  \n172       46105  \n3776         18  \n4486         81  \n1024     308807  \n839         814  \n3903        744  \n3797       1644  \n3773         36  \n173       46105  \n231       19475  \n3452      10269"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html",
    "href": "posts/pybasic/danl_210_python_basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html#what-is-python",
    "href": "posts/pybasic/danl_210_python_basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html#variables-and-data-types",
    "href": "posts/pybasic/danl_210_python_basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html#control-structures",
    "href": "posts/pybasic/danl_210_python_basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html#functions",
    "href": "posts/pybasic/danl_210_python_basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/pybasic/danl_210_python_basic.html#lists-and-dictionaries",
    "href": "posts/pybasic/danl_210_python_basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  }
]